/**
 * Licences
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 03da231e-857d-47ad-b88b-19a9edef6ede
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';

import {Model200} from '../model/model200';
import {Model201} from '../model/model201';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';

import FingerprintJS from '@fingerprintjs/fingerprintjs'


@Injectable()
export class DefaultService {

    protected basePath = 'https://licence-backend.glitch.me';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Activate Licence
     *
     * @param licenceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activateLicenceForm(licenceId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public activateLicenceForm(licenceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public activateLicenceForm(licenceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public activateLicenceForm(licenceId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let token = ''
        FingerprintJS.load().then((fp) => fp.get().then((res) => {
            token = res.visitorId;
        }))


        if (licenceId === null || licenceId === undefined) {
            throw new Error('Required parameter licenceId was null or undefined when calling activateLicence.');
        }

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling activateLicence.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (licenceId !== undefined) {
            formParams = formParams.append('licence_id', <any>licenceId) as any || formParams;
        }
        if (token !== undefined) {
            formParams = formParams.append('token', <any>token) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/licence/activate`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * AddSubscription
     *
     * @param type
     * @param availableLicences
     * @param availableProducts
     * @param availablePolicies
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSubscriptionForm(type: string, availableLicences: string, availableProducts: string, availablePolicies: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSubscriptionForm(type: string, availableLicences: string, availableProducts: string, availablePolicies: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSubscriptionForm(type: string, availableLicences: string, availableProducts: string, availablePolicies: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSubscriptionForm(type: string, availableLicences: string, availableProducts: string, availablePolicies: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling addSubscription.');
        }

        if (availableLicences === null || availableLicences === undefined) {
            throw new Error('Required parameter availableLicences was null or undefined when calling addSubscription.');
        }

        if (availableProducts === null || availableProducts === undefined) {
            throw new Error('Required parameter availableProducts was null or undefined when calling addSubscription.');
        }

        if (availablePolicies === null || availablePolicies === undefined) {
            throw new Error('Required parameter availablePolicies was null or undefined when calling addSubscription.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (type !== undefined) {
            formParams = formParams.append('type', <any>type) as any || formParams;
        }
        if (availableLicences !== undefined) {
            formParams = formParams.append('available_licences', <any>availableLicences) as any || formParams;
        }
        if (availableProducts !== undefined) {
            formParams = formParams.append('available_products', <any>availableProducts) as any || formParams;
        }
        if (availablePolicies !== undefined) {
            formParams = formParams.append('available_policies', <any>availablePolicies) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/subscription/add`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ApiKeyADD
     *
     * @param name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiKeyADDForm(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiKeyADDForm(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiKeyADDForm(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiKeyADDForm(name: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiKeyADD.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/apikey/add`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ApiKeyDelete
     *
     * @param keyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiKeyDeleteForm(keyId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiKeyDeleteForm(keyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiKeyDeleteForm(keyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiKeyDeleteForm(keyId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (keyId === null || keyId === undefined) {
            throw new Error('Required parameter keyId was null or undefined when calling apiKeyDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (keyId !== undefined) {
            formParams = formParams.append('key_id', <any>keyId) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/apikey/delete`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * CurrentUser
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public currentUser(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public currentUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public currentUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public currentUser(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.request<any>('post', `${this.basePath}/api/auth/current`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deactivate Licence
     *
     * @param licenceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deactivateLicenceForm(licenceId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deactivateLicenceForm(licenceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deactivateLicenceForm(licenceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deactivateLicenceForm(licenceId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let token = ''
        FingerprintJS.load().then((fp) => fp.get().then((res) => {
            token = res.visitorId;
        }))
        if (licenceId === null || licenceId === undefined) {
            throw new Error('Required parameter licenceId was null or undefined when calling deactivateLicence.');
        }

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling deactivateLicence.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (licenceId !== undefined) {
            formParams = formParams.append('licence_id', <any>licenceId) as any || formParams;
        }
        if (token !== undefined) {
            formParams = formParams.append('token', <any>token) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/licence/deactivate`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * GetSubscriptionByID
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubscriptionByIDForm(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSubscriptionByIDForm(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSubscriptionByIDForm(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSubscriptionByIDForm(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSubscriptionByID.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (id !== undefined) {
            formParams = formParams.append('id', <any>id) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/subscription/getByID`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * LicenceAdd
     *
     * @param startDate
     * @param endDate
     * @param policyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public licenceAddForm(startDate: string, endDate: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public licenceAddForm(startDate: string, endDate: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public licenceAddForm(startDate: string, endDate: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public licenceAddForm(startDate: string, endDate: string, policyId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling licenceAdd.');
        }

        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling licenceAdd.');
        }

        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling licenceAdd.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (startDate !== undefined) {
            formParams = formParams.append('start_date', <any>startDate) as any || formParams;
        }
        if (endDate !== undefined) {
            formParams = formParams.append('end_date', <any>endDate) as any || formParams;
        }
        if (policyId !== undefined) {
            formParams = formParams.append('policy_id', <any>policyId) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/licence/add`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * LicenceByID
     *
     * @param id
     * @param i
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public licenceByIDForm(id: string, i: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public licenceByIDForm(id: string, i: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public licenceByIDForm(id: string, i: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public licenceByIDForm(id: string, i: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling licenceByID.');
        }

        if (i === null || i === undefined) {
            throw new Error('Required parameter i was null or undefined when calling licenceByID.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (i !== undefined && i !== null) {
            queryParameters = queryParameters.set('i', <any>i);
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (id !== undefined) {
            formParams = formParams.append('id', <any>id) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/licence/getByID`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * LicenceDelete
     *
     * @param licenceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public licenceDeleteForm(licenceId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public licenceDeleteForm(licenceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public licenceDeleteForm(licenceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public licenceDeleteForm(licenceId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (licenceId === null || licenceId === undefined) {
            throw new Error('Required parameter licenceId was null or undefined when calling licenceDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (licenceId !== undefined) {
            formParams = formParams.append('licence_id', <any>licenceId) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/licence/delete`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * PolicyAdd
     *
     * @param type
     * @param productId
     * @param email
     * @param company
     * @param activationTimes
     * @param expirationTime
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public policyAddForm(type: string, productId: string, email: string, company: string, activationTimes: string, expirationTime: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public policyAddForm(type: string, productId: string, email: string, company: string, activationTimes: string, expirationTime: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public policyAddForm(type: string, productId: string, email: string, company: string, activationTimes: string, expirationTime: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public policyAddForm(type: string, productId: string, email: string, company: string, activationTimes: string, expirationTime: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling policyAdd.');
        }

        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling policyAdd.');
        }

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling policyAdd.');
        }

        if (company === null || company === undefined) {
            throw new Error('Required parameter company was null or undefined when calling policyAdd.');
        }

        if (activationTimes === null || activationTimes === undefined) {
            throw new Error('Required parameter activationTimes was null or undefined when calling policyAdd.');
        }

        if (expirationTime === null || expirationTime === undefined) {
            throw new Error('Required parameter expirationTime was null or undefined when calling policyAdd.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (type !== undefined) {
            formParams = formParams.append('type', <any>type) as any || formParams;
        }
        if (productId !== undefined) {
            formParams = formParams.append('product_id', <any>productId) as any || formParams;
        }
        if (email !== undefined) {
            formParams = formParams.append('email', <any>email) as any || formParams;
        }
        if (company !== undefined) {
            formParams = formParams.append('company', <any>company) as any || formParams;
        }
        if (activationTimes !== undefined) {
            formParams = formParams.append('activation_times', <any>activationTimes) as any || formParams;
        }
        if (expirationTime !== undefined) {
            formParams = formParams.append('expiration_time', <any>expirationTime) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/policy/add`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * PolicyByID
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public policyByIDForm(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public policyByIDForm(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public policyByIDForm(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public policyByIDForm(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling policyByID.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (id !== undefined) {
            formParams = formParams.append('id', <any>id) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/policy/getByID`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * PolicyDelete
     *
     * @param policyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public policyDeleteForm(policyId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public policyDeleteForm(policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public policyDeleteForm(policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public policyDeleteForm(policyId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling policyDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (policyId !== undefined) {
            formParams = formParams.append('policy_id', <any>policyId) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/policy/delete`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ProductAdd
     *
     * @param name
     * @param description
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public productAddForm(name: string, description: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public productAddForm(name: string, description: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public productAddForm(name: string, description: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public productAddForm(name: string, description: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling productAdd.');
        }

        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling productAdd.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (name !== undefined) {
            formParams = formParams.append('name', <any>name) as any || formParams;
        }
        if (description !== undefined) {
            formParams = formParams.append('description', <any>description) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/product/add`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ProductByID
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public productByIDForm(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public productByIDForm(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public productByIDForm(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public productByIDForm(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling productByID.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (id !== undefined) {
            formParams = formParams.append('id', <any>id) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/product/getByID`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ProductDelete
     *
     * @param productId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public productDeleteForm(productId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public productDeleteForm(productId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public productDeleteForm(productId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public productDeleteForm(productId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling productDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (productId !== undefined) {
            formParams = formParams.append('product_id', <any>productId) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/product/delete`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Signin
     *
     * @param email
     * @param password
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public signinForm(email: string, password: string, observe?: 'body', reportProgress?: boolean): Observable<Model200>;
    public signinForm(email: string, password: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Model200>>;
    public signinForm(email: string, password: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Model200>>;
    public signinForm(email: string, password: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling signin.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling signin.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (email !== undefined) {
            formParams = formParams.append('email', <any>email) as any || formParams;
        }
        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) as any || formParams;
        }

        return this.httpClient.request<Model200>('post', `${this.basePath}/api/auth/signin`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Signup
     *
     * @param firstName
     * @param lastName
     * @param phone
     * @param email
     * @param password
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public signupForm(firstName: string, lastName: string, phone: string, email: string, password: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public signupForm(firstName: string, lastName: string, phone: string, email: string, password: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public signupForm(firstName: string, lastName: string, phone: string, email: string, password: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public signupForm(firstName: string, lastName: string, phone: string, email: string, password: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (firstName === null || firstName === undefined) {
            throw new Error('Required parameter firstName was null or undefined when calling signup.');
        }

        if (lastName === null || lastName === undefined) {
            throw new Error('Required parameter lastName was null or undefined when calling signup.');
        }

        if (phone === null || phone === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling signup.');
        }

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling signup.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling signup.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (firstName !== undefined) {
            formParams = formParams.append('first_name', <any>firstName) as any || formParams;
        }
        if (lastName !== undefined) {
            formParams = formParams.append('last_name', <any>lastName) as any || formParams;
        }
        if (phone !== undefined) {
            formParams = formParams.append('phone', <any>phone) as any || formParams;
        }
        if (email !== undefined) {
            formParams = formParams.append('email', <any>email) as any || formParams;
        }
        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) as any || formParams;
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/auth/signup`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Test
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public test(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public test(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public test(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public test(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.request<any>('get', `${this.basePath}/api/test/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
